openapi: 3.0.1
info:
  title: PlexeRestApi
  version: "2025-04-17T06:33:32Z"
servers:
- url: https://api.plexe.ai/
paths:
  /:
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /auth:
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /auth/api-keys:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/auth/api-keys
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/auth/api-keys
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /auth/api-keys/{keyId}:
    delete:
      parameters:
      - name: keyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: DELETE
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/auth/api-keys/$method.request.path.keyId
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: keyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /auth/user:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:879381242898:function:PlexeInfraStack-PlexeUsersPlexeAuthLambda3E5B1F57-eJlIiA5ONvGy/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /data:
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /data/health:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/data/health
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /data/query:
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/data/query
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /data/upload:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/data/upload
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/uploads
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /data/use-upload:
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/data/use-upload
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /data/visualization:
    get:
      parameters:
      - name: X-User-Id
        in: header
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/data/visualization/{filename}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /data/visualization/{filename}:
    get:
      parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/data/visualization/{filename}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.filename: method.request.path.filename
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: filename
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
  /database:
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
  /database/connections:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/connections
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/connections
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
  /database/connections/{connection_id}:
    get:
      parameters:
      - name: connection_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/connections/{connection_id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.path.connection_id: method.request.path.connection_id
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    delete:
      parameters:
      - name: connection_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: DELETE
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/connections/{connection_id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.path.connection_id: method.request.path.connection_id
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: connection_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
  /database/ingest:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/ingest
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/ingest
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
  /database/ingest/{ingestion_id}:
    get:
      parameters:
      - name: ingestion_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/ingest/{ingestion_id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
          integration.request.path.ingestion_id: method.request.path.ingestion_id
        passthroughBehavior: when_no_match
    post:
      parameters:
      - name: ingestion_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/ingest/{ingestion_id}/retrigger"
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
          integration.request.path.ingestion_id: method.request.path.ingestion_id
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: ingestion_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
  /database/ingest/{ingestion_id}/retrigger:
    post:
      parameters:
      - name: ingestion_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: POST
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/database/ingest/{ingestion_id}/retrigger"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
          integration.request.path.ingestion_id: method.request.path.ingestion_id
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
    options:
      parameters:
      - name: ingestion_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
  /health:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/health
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /models:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/models
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''console-sable.vercel.app'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /models/{model_name}:
    post:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: POST
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/models/{model_name}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
          integration.request.path.model_name: method.request.path.model_name
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /models/{model_name}/{model_version}:
    get:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/models/{model_version}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.path.model_version: method.request.path.model_version
          integration.request.header.X-User-Id: context.authorizer.user_id
          integration.request.path.model_name: method.request.path.model_name
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /models/{model_name}/{model_version}/describe:
    get:
      parameters:
      - name: X-User-Id
        in: header
        schema:
          type: string
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/models/{model_name}/{model_version}/describe"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.model_version: method.request.path.model_version
          integration.request.header.X-User-Id: context.authorizer.user_id
          integration.request.path.model_name: method.request.path.model_name
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /models/{model_name}/{model_version}/infer:
    post:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:879381242898:function:PlexeInfraStack-PlexeInferenceRouterLambdaA2DB79DF-9fWaAMG0N0id/invocations
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /models/{model_name}/{model_version}/status:
    get:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/models/{model_version}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.path.model_version: method.request.path.model_version
          integration.request.path.model_name: method.request.path.model_name
        passthroughBehavior: when_no_match
    options:
      parameters:
      - name: model_name
        in: path
        required: true
        schema:
          type: string
      - name: model_version
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /uploads:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/uploads
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/uploads
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /uploads/status:
    post:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/uploads/status
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /uploads/{upload_id}:
    get:
      parameters:
      - name: upload_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: GET
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/uploads/{upload_id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.path.upload_id: method.request.path.upload_id
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    delete:
      parameters:
      - name: upload_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http
        httpMethod: DELETE
        uri: "http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/uploads/{upload_id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.upload_id: method.request.path.upload_id
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
        timeoutInMillis: 29000
    options:
      parameters:
      - name: upload_id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /usage:
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /usage/current:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/usage/current
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
  /usage/profile:
    get:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "400":
          description: 400 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
        "500":
          description: 500 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
          content: {}
      security:
      - PlexeInfraStackPlexeRestAuthorizer4246C5E7: []
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: http://plexei-plexe-8xr9lnfrrxqq-544904770.us-west-2.elb.amazonaws.com/usage/profile
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "5\\d{2}":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Content-Type: '''application/json'''
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Api-Key,Authorization,x-api-key,authorization,auth,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.X-User-Id: context.authorizer.user_id
        passthroughBehavior: when_no_match
    options:
      responses:
        "204":
          description: 204 response
          headers:
            Access-Control-Expose-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Max-Age:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Max-Age: '''86400'''
              method.response.header.Access-Control-Expose-Headers: "'x-api-key,X-Api-Key,authorization,Authorization,content-type,Content-Type'"
              method.response.header.Access-Control-Allow-Credentials: '''true'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,X-Api-Key,x-api-key,Authorization,authorization,auth,X-Amz-Security-Token,Origin,Accept,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{ statusCode: 200 }"
        passthroughBehavior: when_no_match
components:
  schemas:
    Empty:
      title: Empty Schema
      type: object
  securitySchemes:
    PlexeInfraStackPlexeRestAuthorizer4246C5E7:
      type: apiKey
      name: Unused
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:879381242898:function:PlexeInfraStack-PlexeUsersPlexeAuthLambda3E5B1F57-eJlIiA5ONvGy/invocations
        authorizerResultTtlInSeconds: 0
x-amazon-apigateway-gateway-responses:
  MISSING_AUTHENTICATION_TOKEN:
    statusCode: 403
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,auth'"
    responseTemplates:
      application/json: "{\"message\":$context.error.messageString}"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,auth'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,auth'"
x-amazon-apigateway-minimum-compression-size: 0
x-original-swagger-version: "2.0"
